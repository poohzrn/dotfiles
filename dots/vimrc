"=== Plugins ===
call plug#begin('~/.vim/plugged')
    Plug 'tpope/vim-fugitive'           "Git integration
    Plug 'tpope/vim-abolish'            "snake_case(crs) MixedCase(crm) camelCase(crc)
    Plug 'tpope/vim-repeat'             " . for abolish and surround
    Plug 'tpope/vim-surround'           "surround e.g. cs''
    Plug 'Valloric/YouCompleteMe'       "Yes you do
    Plug 'LaTeX-Box-Team/LaTeX-Box'     "Compile latex - <\leader>m
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
    Plug 'ervandew/supertab'            "Super tab
    Plug 'majutsushi/tagbar'            "See tags <\leader>t
    Plug 'scrooloose/syntastic'         "Must-have
    Plug 'terryma/vim-multiple-cursors' "Multiple cursers <c-n> /<c-x>
    Plug 'mbbill/undotree'              "A undo tree
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'             "Fuzzy search files
    Plug 'mhinz/vim-startify'           "Vim sessions
    Plug 'itchyny/lightline.vim'        "Neat information line
    Plug 'ap/vim-buftabline'            "See current buffers
    Plug 'terryma/vim-expand-region'    "Expand visual region v/<c-v>
    Plug 'morhetz/gruvbox'              "Colorscheme
    Plug 'scrooloose/nerdtree'          "Fileexplorer
    Plug 'scrooloose/nerdcommenter'     "Commenter ex. <\leader>cn
call plug#end()
"!

"=== plugin: 'itchyny/lightline.vim' ===
set laststatus=2
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ }
"!

"=== plugin: 'morhetz/gruvbox' ===
set t_Co=256
colorscheme gruvbox
set background=dark
"!

"=== plugin: 'scrooloose/syntastic' ===
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_ignore_files = ['/tmp/', '\m\c\.h$']
let g:syntastic_mode_map = { 'mode': 'active',
   \ 'active_filetypes': [''],
   \ 'passive_filetypes': ['*'] }
"!

"=== plugin: 'SirVer/ultisnips' ===
   " Trigger configuration.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"!

"=== plugin: 'Valloric/YouCompleteMe' ===
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"!

"=== plugin: 'ervandew/supertab' ===
let g:SuperTabDefaultCompletionType = '<C-n>'
"!

"=== plugin: 'mhinz/vim-startify' ===

let g:startify_bookmarks = [
    \ {'c': '~/git/dotfiles/dots/vimrc'},
    \ {'f': '~/git/dotfiles/fish/config.fish'},
    \ ]
let g:startify_list_order = [
      \ ['   Bookmarks '], 'bookmarks',
      \ ['   Sessions '],  'sessions',
      \ ['   Directory '],   'dir',
      \ ['   Files'],       'files' ,
      \ ]

let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ ]
"!

"=== plugin: terryma/vim-expand-region ===
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> n :call VisualSelection('f', '')<CR>
vnoremap <silent> * :call VisualSelection('b', '')<CR>
"!

"=== Misc Settings ===
filetype plugin indent on
let python_highlight_all = 1
let g:tex_flavor='latex'
set noswapfile      "disable .swp files
set nobackup        "disable .swp files
set nowb            "disable .swp files
syntax enable       "enable syntax highlighting
syntax on
set list listchars=tab:\ \ ,trail:·     "Display tabs and trailing spaces visually
set number          "show line numbers
set ts=4            "set tabs to have 4 spaces
set autoindent      "indent when moving to the next line while writing code
set expandtab       "expand tabs into spaces
set shiftwidth=4    "when using the >> or << commands, shift lines by 4 spaces
set cursorline      "show a visual line under the cursor's current line 
set showmatch
set rtp+=/home/lasse/.fzf
"!

"=== Wild Menu ===
set wildmenu
set incsearch       " Find the next match as we type the search
set hlsearch        " Highlight searches by default
set ignorecase      " Ignore case when searching...
set smartcase       " ...unless we type a capital
set nohlsearch      " Noh after search
"!

"=== Persistent Undo ===
" Keep undo history across sessions, by storing in file.
if has('persistent_undo')
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile
endif
"!

"=== Key Mapping ===
" Command mode
cnoremap , :
cnoremap <C-a> <Home>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-d> <Delete>
cnoremap <C-e> <End>
" Normal mode
set pastetoggle=<F2>
nnoremap <F2> :set invpaste paste?<CR>
nnoremap <F9> :!python %<CR>
nnoremap <F11> :Startify<CR>
nnoremap <F12> :NERDTree<CR>
nnoremap , :
nnoremap ½ $
nnoremap <space> <NOP>
nnoremap <c-j> <c-w>j
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-k> <c-w>k
noremap <space><space> zz
noremap <Del> :bd <CR>
"Use FZF (Fazt Zearch Fandme)
nnoremap <C-t> :FZF<CR>
nnoremap <C-p> :FZF<CR>
nnoremap <C-b> :Buffers<CR>
" Commit amazingly super FaZssT
noremap cc :Gcommit %:p <CR>i

noremap <cr><cr> :NERDTree <CR>
" Insert mode
inoremap <CR>f <esc>
" Visual mode
vnoremap ½ $
" Mappings for split
noremap <c-j> <c-w>j
noremap <c-h> <c-w>h
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l
"!

"=== Leader Mapping ===
" Follow the Leader
let mapleader="\<Space>"
nnoremap <Leader>sp :setlocal spell! spelllang=en_us<CR>
nnoremap <Leader>sy :SyntasticToggleMode <CR>
nnoremap <Leader>u :UndotreeToggle<CR><C-w>h
nnoremap <Leader>gd :Gdiff <CR>
nnoremap <Leader>st :Gstatus <CR>
nnoremap <Leader>r z=
nnoremap <Leader>w ]s
nnoremap <Leader>b [s
nnoremap <Leader>s :w <CR>
nnoremap <Leader>m :Latexmk<CR>
nnoremap <Leader>t :TagbarToggle<CR>
nnoremap <Leader>j gjzz
nnoremap <Leader>k gkzz
nnoremap <Leader>h :bprevious<CR>
nnoremap <Leader>l :bnext<CR>
nnoremap <Leader>o qp
nnoremap <Leader>pp @p
" Tabbing und buffering
noremap <Leader>tl :tabnext<CR>
noremap <Leader>th :tabprev<CR>
noremap <Leader>tn :tabnew<space>
noremap <Leader>td :tabclose<CR>
noremap <Leader>bh :bprevious<CR>
noremap <Leader>bl :bnext<CR>
noremap <Leader>bd :bdelete<CR>
" Copy and pasting using the " register
vmap <Leader>y "+y
vmap <Leader>d "+d
vmap <Leader>p "+p
vmap <Leader>P "+P
nmap <Leader>p "+p
nmap <Leader>P "+P
"!

"=== Folding in vimrc ===
function! Vimfold()
    setl fillchars=fold:\ 
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/"==.*/ end=/"!/ transparent fold keepend extend
    function! FoldText()
        return substitute(getline(v:foldstart), '{ w.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction
"!

"=== Visual Selection ===
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
